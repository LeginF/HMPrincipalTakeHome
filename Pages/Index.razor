@page "/"
@inject HttpClient Http



<h1>Github Search</h1>

Enter your search

<table>
    <tr>
        <th>GitHub Authorizaton Token</th>
        <th><input @bind="AuthorizationToken" /></th>
    </tr>
    <tr>
        <th>Topic</th>
        <th><input @bind="Topic" /></th>
    </tr>
</table>
<button class="btn btn-primary" @onclick="Search">Search</button>


@Collaborators

@if ((_responses == null))
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table'>
        <thead>
            <tr>
                <th>Name</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var item in _responses.items)
            {
                GetCollaborators(item.collaborators_url);
                    <tr>
                        <td>@item.name</td>
                        <td>@item.description</td>
                        <td>@Collaborators</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}


@code 
{


    private string Topic {get; set; }
    private string AuthorizationToken { get; set; }
    private string Collaborators { get; set; }

    public class Repository
    {
        public string id {get;set;}
        public string node_id {get;set;}
        public string name {get;set;}
        public string full_name{get;set;}

        //public Owner owner {get;set;}
    }

    private class item
    {
        public string name {get;set;}
        public string path {get;set;}
        public string sha {get;set;}
        public string url {get;set;}
        public string git_url {get;set;}
        public string html_url {get;set;}
        public string description{get;set;}
        public string collaborators_url{get; set;}
        public Repository repository {get;set;}
    }

    private class Response
    {
        public int total_count {get;set;}
        public bool incomplete_results {get;set;}
        public List<item> items{get;set;}
    }

    private Response _responses = null; //new Response();


}

@functions 
{
   

    private async Task Search()
    {
        try
        {
            var url = "https://api.github.com/search/repositories?q=topic:" + Topic;
            _responses = await Http.GetJsonAsync<Response>(url);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        StateHasChanged();
    }

    private async Task GetCollaborators(String collaborators_url)
    {
        try{
            using(var client = new HttpClient())
            {
                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Token", AuthorizationToken);
                Collaborators =  await client.GetStringAsync(collaborators_url);
                StateHasChanged();
            
            }
        } catch(Exception ex) {
            Console.WriteLine(ex.Message);
        }
    }
}