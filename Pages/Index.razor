@page "/"
@inject HttpClient Http




<table>
    <tr>
        <th>GitHub Authorizaton Token</th>
        <th><input @bind="AuthorizationToken" width="200"/></th>
        <th>@AuthorizationError</th>
    </tr>
    <tr>
        <th>Topic</th>
        <th><input @bind="Topic" /></th>
        <th>@TopicError</th>
    </tr>
</table>
<span id="searching" hidden="@HideSearching">Searching...</span>
&nbsp;<br />
<button class="btn btn-primary" @onclick="Search">Search</button>
&nbsp;<br />


@if (_responses != null)
{
    @if (_responses.total_count < 1)
    {
        <span>No search results</span>
    }
    else
    {
    <button @onclick="Back" hidden="@HideBack">&larr;</button> @Page<span> of </span>@Pages
    <button @onclick="Forward" hidden="@HideForward">&rarr;</button>
    <table class='table'>
        <thead>
            <tr>
                <th>Name</th>
                <th>Description &amp; Topics</th>
                <th>Contributors</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _responses.items)
            {
                @if ((item.index > (Page - 1) * PAGE_SIZE) && (item.index < Page * PAGE_SIZE))
                    // only show items that belong on the current page
                {
                    <tr>
                        <td>
                            <a href="@item.html_url" target="_blank">@item.name</a>
                        </td>
                        <td>
                            <b>Description:</b>&nbsp;@item.description<br />
                            
                        </td>
                        <td>
                            <b>Contributors:</b>&nbsp;
                            <Contributors contributors_url="@item.contributors_url" authToken="@AuthorizationToken" />
                            @if (item.owner != null)
                            {
                                 <hr /><br />
                                 <b>Topics:</b><span>&nbsp;</span><TopicsControl Owner="@item.owner.login" Repo="@item.name" AuthToken="@AuthorizationToken" />
                            }
                        </td>
                    </tr>
                 }
             }

            </tbody>
        </table>
        }
    }


@code 
{
    private string Topic {get; set; }
    private string AuthorizationToken { get; set; }
    private string TopicError { get; set; }
    private string AuthorizationError { get; set; }
    private int Page = 1;
    private const int PAGE_SIZE = 10;
    private int Pages;
    private bool HideBack = false;
    private bool HideForward = false;
    private bool HideSearching = true;

    public class Repository
    {
        public string id {get;set;}
        public string node_id {get;set;}
        public string name {get;set;}
        public string full_name{get;set;}
        public Owner owner { get; set; }
    }

    public class Owner
    {
        public string login { get; set; }
    }


    private class Item
    {
        public int index { get; set; }
        public string name {get;set;}
        public string path {get;set;}
        public string sha {get;set;}
        public string url {get;set;}
        public string git_url {get;set;}
        public string html_url {get;set;}
        public string description{get;set;}
        public string collaborators_url{get; set;}
        public Repository repository { get;set;}
        public string collaborators { get; set; }
        public string contributors_url { get; set; }
        public string contributors { get; set; }
        public string tags_url { get; set; }
        public string topics { get; set; }
        public Owner owner { get; set; }
    }


    private class Response
    {
        public int total_count {get;set;}
        public bool incomplete_results {get;set;}
        public List<Item> items{get;set;}
    }

    private Response _responses = null; //new Response();


}

@functions 
{
    void Back()
    {
        if (Page > 1)
        {
            Page--;
            DoShowButtons();
            StateHasChanged();
        }
    }

    void Forward()
    {
        if (Page < Pages)
        {
            Page++;
            DoShowButtons();
            StateHasChanged();
        }
    }

    void DoShowButtons()
    {
        HideBack = (Page <= 1);
        HideForward = (Page >= Pages);
    }

    async Task Search()
    {
        try
        {
            if (NoErrors())
            {
                try
                {
                    using(var client = new HttpClient())
                    {
                        HideSearching = false;
                        _responses = null;
                        StateHasChanged();
                        client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/vnd.github.v3+json"));
                        var url = "https://api.github.com/search/repositories?q=topic:" + Topic;
                        _responses = await client.GetJsonAsync<Response>(url);
                        SetIndex(_responses);
                        Page = 1;
                        DoShowButtons();
                        HideSearching = true;
                        StateHasChanged();
                    }
                }
                catch (Exception ex)
                {
                    AuthorizationError = ex.Message;
                    StateHasChanged();
                }
            }

        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        StateHasChanged();
    }

    private void SetIndex(Response responses)
    {
        int i = 1;
        foreach(var item in responses.items)
        {
            item.index = i++;
        }
        Pages = --i / PAGE_SIZE;
        if (i % PAGE_SIZE > 0) Pages++;
    }

    private bool NoErrors()
    {
        var retVal = true;
        AuthorizationError = TopicError = string.Empty;

        if (string.IsNullOrWhiteSpace(AuthorizationToken))
        {
            AuthorizationError = "Please provide an authorization token.";
            retVal = false;
        }

        if (string.IsNullOrWhiteSpace(Topic))
        {
            TopicError = "Please provide a topic to search for";
            retVal = false;
        }

        return retVal;
    }


}